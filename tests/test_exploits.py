#!/usr/bin/env python3
"""
Unit tests for exploit module
"""

import unittest
from unittest.mock import patch, MagicMock
from core.exploit_module import ExploitModule

class TestExploitModule(unittest.TestCase):
    """Test cases for exploit module"""
    
    def setUp(self):
        """Set up test fixtures"""
        self.exploit = ExploitModule()
    
    def test_initialization(self):
        """Test exploit module initialization"""
        self.assertIsNotNone(self.exploit)
    
    def test_payload_generation(self):
        """Test payload generation"""
        payload_type = "reverse_shell"
        target = "192.168.1.100"
        port = 4444
        
        payload = self.exploit.generate_payload(payload_type, target, port)
        self.assertIsInstance(payload, str)
        self.assertIn(target, payload)
        self.assertIn(str(port), payload)
    
    def test_exploit_validation(self):
        """Test exploit validation"""
        exploit_data = {
            "name": "Test Exploit",
            "target": "192.168.1.100",
            "payload": "test_payload"
        }
        
        is_valid = self.exploit.validate_exploit(exploit_data)
        self.assertIsInstance(is_valid, bool)
    
    def test_safe_mode(self):
        """Test safe mode functionality"""
        # Test that safe mode prevents dangerous operations
        self.exploit.set_safe_mode(True)
        self.assertTrue(self.exploit.is_safe_mode())

if __name__ == '__main__':
    unittest.main()
