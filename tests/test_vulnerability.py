#!/usr/bin/env python3
"""
Unit tests for vulnerability scanner module
"""

import unittest
from unittest.mock import patch, MagicMock
from core.vulnerability_scanner import VulnerabilityScanner

class TestVulnerabilityScanner(unittest.TestCase):
    """Test cases for vulnerability scanner"""
    
    def setUp(self):
        """Set up test fixtures"""
        self.scanner = VulnerabilityScanner()
    
    def test_initialization(self):
        """Test vulnerability scanner initialization"""
        self.assertIsNotNone(self.scanner)
    
    def test_cve_lookup(self):
        """Test CVE lookup functionality"""
        # Test CVE scanning for a service
        result = self.scanner.scan_cve_vulnerabilities("apache", "2.4.41")
        self.assertIsInstance(result, dict)
    
    def test_vulnerability_scan(self):
        """Test vulnerability scanning"""
        targets = [{"hostname": "127.0.0.1", "port": 80, "service": "http"}]
        result = self.scanner.comprehensive_scan(targets)
        self.assertIsInstance(result, dict)
        self.assertIn("targets", result)
    
    def test_risk_assessment(self):
        """Test risk assessment"""
        vulnerabilities = [
            {"severity": "high", "cvss": 9.0},
            {"severity": "medium", "cvss": 6.5},
            {"severity": "low", "cvss": 3.0}
        ]
        
        # Test risk score calculation
        risk_score = self.scanner._calculate_risk_score(vulnerabilities)
        self.assertIsInstance(risk_score, int)
        self.assertGreaterEqual(risk_score, 0)
        # Risk score can be higher than 10 for multiple high-severity vulnerabilities

if __name__ == '__main__':
    unittest.main()
