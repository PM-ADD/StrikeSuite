#!/usr/bin/env python3
"""
Vulnerability Assessment Tab
GUI for vulnerability scanning functionality
"""

from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,
                             QLabel, QLineEdit, QPushButton, QTextEdit,
                             QCheckBox, QGroupBox, QTableWidget, QTableWidgetItem,
                             QHeaderView, QSpinBox, QScrollArea, QComboBox)
from PyQt5.QtCore import Qt, QThread, pyqtSignal

# Import core modules
import sys
from pathlib import Path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

class VulnerabilityTab(QWidget):
    """Vulnerability assessment tab widget"""
    
    def __init__(self):
        super().__init__()
        self.init_ui()
        
    def init_ui(self):
        """Initialize the user interface"""
        # Create scroll area for the entire tab
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        
        # Create main widget
        main_widget = QWidget()
        scroll_area.setWidget(main_widget)
        
        # Create main layout
        main_layout = QVBoxLayout(self)
        main_layout.addWidget(scroll_area)
        
        layout = QVBoxLayout(main_widget)
        
        # Target configuration
        target_group = QGroupBox("Target Configuration")
        target_layout = QGridLayout(target_group)
        
        target_layout.addWidget(QLabel("Target URL/IP:"), 0, 0)
        self.target_input = QLineEdit()
        self.target_input.setPlaceholderText("https://example.com or 192.168.1.1")
        target_layout.addWidget(self.target_input, 0, 1)
        
        target_layout.addWidget(QLabel("Port:"), 1, 0)
        self.port_input = QLineEdit()
        self.port_input.setText("80")
        self.port_input.setPlaceholderText("80, 443, 8080")
        target_layout.addWidget(self.port_input, 1, 1)
        
        layout.addWidget(target_group)
        
        # Advanced scan options
        advanced_group = QGroupBox("Advanced Vulnerability Scan Options")
        advanced_layout = QGridLayout(advanced_group)
        
        # Scan depth
        advanced_layout.addWidget(QLabel("Scan Depth:"), 0, 0)
        self.scan_depth_combo = QComboBox()
        self.scan_depth_combo.addItems(["Quick", "Standard", "Deep", "Comprehensive"])
        self.scan_depth_combo.setCurrentText("Standard")
        advanced_layout.addWidget(self.scan_depth_combo, 0, 1)
        
        # Stealth mode
        self.stealth_check = QCheckBox("Stealth Mode")
        self.stealth_check.setChecked(False)
        advanced_layout.addWidget(self.stealth_check, 1, 0)
        
        # OS fingerprinting
        self.os_fp_check = QCheckBox("OS Fingerprinting")
        self.os_fp_check.setChecked(True)
        advanced_layout.addWidget(self.os_fp_check, 1, 1)
        
        # Service fingerprinting
        self.service_fp_check = QCheckBox("Service Fingerprinting")
        self.service_fp_check.setChecked(True)
        advanced_layout.addWidget(self.service_fp_check, 2, 0)
        
        # Exploit verification
        self.exploit_check = QCheckBox("Exploit Verification")
        self.exploit_check.setChecked(False)
        advanced_layout.addWidget(self.exploit_check, 2, 1)
        
        # False positive reduction
        self.fp_reduction_check = QCheckBox("False Positive Reduction")
        self.fp_reduction_check.setChecked(True)
        advanced_layout.addWidget(self.fp_reduction_check, 3, 0)
        
        # Custom payloads
        self.custom_payloads_check = QCheckBox("Custom Payloads")
        self.custom_payloads_check.setChecked(True)
        advanced_layout.addWidget(self.custom_payloads_check, 3, 1)
        
        layout.addWidget(advanced_group)
        
        # Scan options
        options_group = QGroupBox("Vulnerability Scan Options")
        options_layout = QVBoxLayout(options_group)
        
        # SSL/TLS tests
        self.ssl_check = QCheckBox("SSL/TLS Security")
        self.ssl_check.setChecked(True)
        options_layout.addWidget(self.ssl_check)
        
        # HTTP header tests
        self.headers_check = QCheckBox("HTTP Security Headers")
        self.headers_check.setChecked(True)
        options_layout.addWidget(self.headers_check)
        
        # Default credentials
        self.creds_check = QCheckBox("Default Credentials")
        self.creds_check.setChecked(True)
        options_layout.addWidget(self.creds_check)
        
        # CVE scanning
        self.cve_check = QCheckBox("CVE Vulnerability Scan")
        self.cve_check.setChecked(True)
        options_layout.addWidget(self.cve_check)
        
        # Web application tests
        self.web_check = QCheckBox("Web Application Security")
        self.web_check.setChecked(True)
        options_layout.addWidget(self.web_check)
        
        # Database security tests
        self.db_check = QCheckBox("Database Security")
        self.db_check.setChecked(True)
        options_layout.addWidget(self.db_check)
        
        # Network service tests
        self.network_check = QCheckBox("Network Service Security")
        self.network_check.setChecked(True)
        options_layout.addWidget(self.network_check)
        
        layout.addWidget(options_group)
        
        # Control buttons
        button_layout = QHBoxLayout()
        
        self.start_scan_btn = QPushButton("Start Vulnerability Scan")
        self.start_scan_btn.clicked.connect(self.start_scan)
        button_layout.addWidget(self.start_scan_btn)
        
        self.advanced_scan_btn = QPushButton("Advanced Vulnerability Scan")
        self.advanced_scan_btn.clicked.connect(self.start_advanced_scan)
        button_layout.addWidget(self.advanced_scan_btn)
        
        self.stop_scan_btn = QPushButton("Stop Scan")
        self.stop_scan_btn.setEnabled(False)
        self.stop_scan_btn.clicked.connect(self.stop_scan)
        button_layout.addWidget(self.stop_scan_btn)
        
        layout.addLayout(button_layout)
        
        # Results section
        results_group = QGroupBox("Vulnerability Scan Results")
        results_layout = QVBoxLayout(results_group)
        
        # Results table
        self.results_table = QTableWidget()
        self.results_table.setColumnCount(5)
        self.results_table.setHorizontalHeaderLabels(["Vulnerability", "Severity", "CVE", "Description", "Remediation"])
        self.results_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        results_layout.addWidget(self.results_table)
        
        # Results text
        self.results_text = QTextEdit()
        self.results_text.setMaximumHeight(200)
        self.results_text.setPlaceholderText("Vulnerability scan results will appear here...")
        results_layout.addWidget(self.results_text)
        
        layout.addWidget(results_group)
        
    def start_scan(self):
        """Start vulnerability scan"""
        target = self.target_input.text().strip()
        if not target:
            self.results_text.append("Please enter a target")
            return
            
        self.start_scan_btn.setEnabled(False)
        self.stop_scan_btn.setEnabled(True)
        
        # Clear previous results
        self.results_table.setRowCount(0)
        self.results_text.clear()
        
        # Show progress
        self.results_text.append(f"Starting vulnerability scan on {target}...")
        self.results_text.append("Scanning for vulnerabilities...")
        
        # Start scan in background thread
        self.scan_thread = VulnerabilityScanThread(target, self.get_scan_options())
        self.scan_thread.result.connect(self.scan_finished)
        self.scan_thread.start()
        
    def start_advanced_scan(self):
        """Start advanced vulnerability scan"""
        target = self.target_input.text().strip()
        if not target:
            self.results_text.append("Please enter a target")
            return
            
        self.start_scan_btn.setEnabled(False)
        self.advanced_scan_btn.setEnabled(False)
        self.stop_scan_btn.setEnabled(True)
        
        # Clear previous results
        self.results_table.setRowCount(0)
        self.results_text.clear()
        
        # Show progress
        self.results_text.append(f"Starting advanced vulnerability scan on {target}...")
        self.results_text.append("Performing advanced vulnerability analysis...")
        
        # Start advanced scan in background thread
        self.scan_thread = AdvancedVulnerabilityScanThread(target, self.get_advanced_scan_options())
        self.scan_thread.result.connect(self.advanced_scan_finished)
        self.scan_thread.start()
        
    def get_scan_options(self):
        """Get selected scan options"""
        return {
            'ssl_tls': self.ssl_check.isChecked(),
            'headers': self.headers_check.isChecked(),
            'credentials': self.creds_check.isChecked(),
            'cve': self.cve_check.isChecked(),
            'web_app': self.web_check.isChecked(),
            'database': self.db_check.isChecked(),
            'network': self.network_check.isChecked()
        }
        
    def get_advanced_scan_options(self):
        """Get advanced scan options"""
        scan_depth_map = {
            "Quick": "quick",
            "Standard": "standard", 
            "Deep": "deep",
            "Comprehensive": "comprehensive"
        }
        
        return {
            'scan_depth': scan_depth_map.get(self.scan_depth_combo.currentText(), 'standard'),
            'stealth_mode': self.stealth_check.isChecked(),
            'os_fingerprinting': self.os_fp_check.isChecked(),
            'service_fingerprinting': self.service_fp_check.isChecked(),
            'exploit_verification': self.exploit_check.isChecked(),
            'false_positive_reduction': self.fp_reduction_check.isChecked(),
            'custom_payloads': self.custom_payloads_check.isChecked(),
            'ssl_tls': self.ssl_check.isChecked(),
            'headers': self.headers_check.isChecked(),
            'credentials': self.creds_check.isChecked(),
            'cve': self.cve_check.isChecked(),
            'web_app': self.web_check.isChecked(),
            'database': self.db_check.isChecked(),
            'network': self.network_check.isChecked()
        }
        
    def advanced_scan_finished(self, results):
        """Handle advanced scan completion"""
        self.start_scan_btn.setEnabled(True)
        self.advanced_scan_btn.setEnabled(True)
        self.stop_scan_btn.setEnabled(False)
        
        # Clear previous results
        self.results_table.setRowCount(0)
        self.results_text.clear()
        
        if 'error' in results:
            self.results_text.append(f"Advanced scan error: {results['error']}")
            return
        
        # Handle advanced scan results
        if 'targets' in results:
            # Advanced scan results format
            for target_result in results.get('targets', []):
                target_name = target_result.get('hostname', 'Unknown')
                risk_score = target_result.get('risk_score', 0)
                
                self.results_text.append(f"\n=== Target: {target_name} (Risk Score: {risk_score}/100) ===")
                
                # Display OS information
                os_info = target_result.get('os_info', {})
                if os_info.get('detected_os') != 'Unknown':
                    self.results_text.append(f"OS: {os_info.get('detected_os', 'Unknown')} (Confidence: {os_info.get('confidence', 0)}%)")
                
                # Display service information
                service_info = target_result.get('service_info', {})
                if service_info.get('service_name') != 'Unknown':
                    self.results_text.append(f"Service: {service_info.get('service_name', 'Unknown')} {service_info.get('version', 'Unknown')}")
                
                # Display vulnerabilities
                vulnerabilities = target_result.get('vulnerabilities', [])
                for vuln in vulnerabilities:
                    row = self.results_table.rowCount()
                    self.results_table.insertRow(row)
                    
                    self.results_table.setItem(row, 0, QTableWidgetItem(vuln.get('type', 'Unknown')))
                    self.results_table.setItem(row, 1, QTableWidgetItem(vuln.get('severity', 'Unknown')))
                    self.results_table.setItem(row, 2, QTableWidgetItem(vuln.get('cve', 'N/A')))
                    self.results_table.setItem(row, 3, QTableWidgetItem(vuln.get('description', '')))
                    self.results_table.setItem(row, 4, QTableWidgetItem(vuln.get('remediation', '')))
                    
                    # Add to results text
                    severity = vuln.get('severity', 'Unknown')
                    vuln_type = vuln.get('type', 'Unknown')
                    self.results_text.append(f"[{severity}] {vuln_type}: {vuln.get('description', '')}")
                    
                    if vuln.get('cve') and vuln.get('cve') != 'N/A':
                        self.results_text.append(f"  CVE: {vuln.get('cve')}")
                    if vuln.get('remediation'):
                        self.results_text.append(f"  Fix: {vuln.get('remediation')}")
                    self.results_text.append("")
        
        # Show advanced scan summary
        if 'summary' in results:
            summary = results['summary']
            self.results_text.append(f"\n=== Advanced Scan Summary ===")
            self.results_text.append(f"Total Targets: {summary.get('total_targets', 0)}")
            self.results_text.append(f"Total Vulnerabilities: {summary.get('total_vulnerabilities', 0)}")
            self.results_text.append(f"Critical: {summary.get('critical_count', 0)}")
            self.results_text.append(f"High: {summary.get('high_count', 0)}")
            self.results_text.append(f"Medium: {summary.get('medium_count', 0)}")
            self.results_text.append(f"Low: {summary.get('low_count', 0)}")
            self.results_text.append(f"Info: {summary.get('info_count', 0)}")
            self.results_text.append(f"Verified Exploits: {summary.get('verified_exploits', 0)}")
            self.results_text.append(f"False Positives: {summary.get('false_positives', 0)}")
        
        # Show final summary
        total_vulns = self.results_table.rowCount()
        if total_vulns > 0:
            self.results_text.append(f"\n=== Advanced Scan Complete: {total_vulns} vulnerabilities found ===")
        else:
            self.results_text.append("\n=== Advanced Scan Complete: No vulnerabilities found ===")
        
    def scan_finished(self, results):
        """Handle scan completion"""
        self.start_scan_btn.setEnabled(True)
        self.advanced_scan_btn.setEnabled(True)
        self.stop_scan_btn.setEnabled(False)
        
        # Clear previous results
        self.results_table.setRowCount(0)
        self.results_text.clear()
        
        # Handle different result formats
        if isinstance(results, dict):
            # Check if it's the comprehensive scan format
            if 'targets' in results:
                # Comprehensive scan results
                for target_result in results.get('targets', []):
                    target_name = target_result.get('hostname', 'Unknown')
                    self.results_text.append(f"\n=== Target: {target_name} ===")
                    
                    vulnerabilities = target_result.get('vulnerabilities', [])
                    for vuln in vulnerabilities:
                        row = self.results_table.rowCount()
                        self.results_table.insertRow(row)
                        
                        self.results_table.setItem(row, 0, QTableWidgetItem(vuln.get('type', 'Unknown')))
                        self.results_table.setItem(row, 1, QTableWidgetItem(vuln.get('severity', 'Unknown')))
                        self.results_table.setItem(row, 2, QTableWidgetItem(vuln.get('cve', 'N/A')))
                        self.results_table.setItem(row, 3, QTableWidgetItem(vuln.get('description', '')))
                        self.results_table.setItem(row, 4, QTableWidgetItem(vuln.get('remediation', '')))
                        
                        # Add to results text
                        severity = vuln.get('severity', 'Unknown')
                        vuln_type = vuln.get('type', 'Unknown')
                        self.results_text.append(f"[{severity}] {vuln_type}: {vuln.get('description', '')}")
                        
                        if vuln.get('cve') and vuln.get('cve') != 'N/A':
                            self.results_text.append(f"  CVE: {vuln.get('cve')}")
                        if vuln.get('remediation'):
                            self.results_text.append(f"  Fix: {vuln.get('remediation')}")
                        self.results_text.append("")
            else:
                # Direct vulnerabilities format
                vulnerabilities = results.get('vulnerabilities', [])
                for vuln in vulnerabilities:
                    row = self.results_table.rowCount()
                    self.results_table.insertRow(row)
                    
                    self.results_table.setItem(row, 0, QTableWidgetItem(vuln.get('type', 'Unknown')))
                    self.results_table.setItem(row, 1, QTableWidgetItem(vuln.get('severity', 'Unknown')))
                    self.results_table.setItem(row, 2, QTableWidgetItem(vuln.get('cve', 'N/A')))
                    self.results_table.setItem(row, 3, QTableWidgetItem(vuln.get('description', '')))
                    self.results_table.setItem(row, 4, QTableWidgetItem(vuln.get('remediation', '')))
                    
                    # Add to results text
                    severity = vuln.get('severity', 'Unknown')
                    vuln_type = vuln.get('type', 'Unknown')
                    self.results_text.append(f"[{severity}] {vuln_type}: {vuln.get('description', '')}")
        else:
            # Handle non-dict results
            self.results_text.append(f"Scan Results: {results}")
        
        # Show summary
        total_vulns = self.results_table.rowCount()
        if total_vulns > 0:
            self.results_text.append(f"\n=== Scan Complete: {total_vulns} vulnerabilities found ===")
        else:
            self.results_text.append("\n=== Scan Complete: No vulnerabilities found ===")
            
    def stop_scan(self):
        """Stop current scan"""
        if hasattr(self, 'scan_thread') and self.scan_thread.isRunning():
            self.scan_thread.terminate()
            self.scan_thread.wait()
            
        self.start_scan_btn.setEnabled(True)
        self.stop_scan_btn.setEnabled(False)
        self.results_text.append("Scan stopped by user")

class VulnerabilityScanThread(QThread):
    """Thread for running vulnerability scans"""
    result = pyqtSignal(dict)
    
    def __init__(self, target, options):
        super().__init__()
        self.target = target
        self.options = options
        
    def run(self):
        """Run the vulnerability scan"""
        try:
            try:
                from core.vulnerability_scanner import VulnerabilityScanner
            except ImportError:
                self.result.emit({'error': 'VulnerabilityScanner module not available'})
                return
                
            scanner = VulnerabilityScanner()
            
            # Create target list - handle URLs properly
            if self.target.startswith(('http://', 'https://')):
                # Extract hostname and port from URL
                from urllib.parse import urlparse
                parsed = urlparse(self.target)
                hostname = self.target  # Keep full URL for scanning
                port = parsed.port or (443 if parsed.scheme == 'https' else 80)
                service = 'https' if parsed.scheme == 'https' else 'http'
            else:
                # Regular hostname/IP
                hostname = self.target
                port = 80
                service = 'http'
            
            targets = [{'hostname': hostname, 'port': port, 'service': service}]
            results = scanner.comprehensive_scan(targets)
            
            self.result.emit(results)
            
        except Exception as e:
            self.result.emit({'error': str(e)})

class AdvancedVulnerabilityScanThread(QThread):
    """Thread for running advanced vulnerability scans"""
    result = pyqtSignal(dict)
    
    def __init__(self, target, options):
        super().__init__()
        self.target = target
        self.options = options
        
    def run(self):
        """Run the advanced vulnerability scan"""
        try:
            try:
                from core.vulnerability_scanner import VulnerabilityScanner
            except ImportError:
                self.result.emit({'error': 'VulnerabilityScanner module not available'})
                return
                
            # Create scanner with advanced options
            scanner = VulnerabilityScanner(
                scan_depth=self.options.get('scan_depth', 'standard'),
                stealth_mode=self.options.get('stealth_mode', False)
            )
            
            # Create target list - handle URLs properly
            if self.target.startswith(('http://', 'https://')):
                from urllib.parse import urlparse
                parsed = urlparse(self.target)
                hostname = self.target
                port = parsed.port or (443 if parsed.scheme == 'https' else 80)
                service = 'https' if parsed.scheme == 'https' else 'http'
            else:
                hostname = self.target
                port = 80
                service = 'http'
            
            targets = [{'hostname': hostname, 'port': port, 'service': service}]
            
            # Run advanced vulnerability scan
            results = scanner.advanced_vulnerability_scan(targets, self.options)
            
            self.result.emit(results)
            
        except Exception as e:
            self.result.emit({'error': str(e)})
