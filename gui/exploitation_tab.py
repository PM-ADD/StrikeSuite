#!/usr/bin/env python3
"""
Exploitation Tab
GUI for exploitation testing functionality
"""

from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,
                             QLabel, QLineEdit, QPushButton, QTextEdit,
                             QCheckBox, QGroupBox, QTableWidget, QTableWidgetItem,
                             QHeaderView, QComboBox, QScrollArea)
from PyQt5.QtCore import Qt, QThread, pyqtSignal

# Import core modules
import sys
from pathlib import Path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

class ExploitationTab(QWidget):
    """Exploitation testing tab widget"""
    
    def __init__(self):
        super().__init__()
        self.init_ui()
        
    def init_ui(self):
        """Initialize the user interface"""
        # Create scroll area for the entire tab
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        
        # Create main widget
        main_widget = QWidget()
        scroll_area.setWidget(main_widget)
        
        # Create main layout
        main_layout = QVBoxLayout(self)
        main_layout.addWidget(scroll_area)
        
        layout = QVBoxLayout(main_widget)
        
        # Target configuration
        target_group = QGroupBox("Target Configuration")
        target_layout = QGridLayout(target_group)
        
        target_layout.addWidget(QLabel("Target URL:"), 0, 0)
        self.target_input = QLineEdit()
        self.target_input.setPlaceholderText("https://example.com")
        target_layout.addWidget(self.target_input, 0, 1)
        
        target_layout.addWidget(QLabel("Parameter:"), 1, 0)
        self.param_input = QLineEdit()
        self.param_input.setPlaceholderText("id, user, search")
        target_layout.addWidget(self.param_input, 1, 1)
        
        layout.addWidget(target_group)
        
        # Exploitation options
        options_group = QGroupBox("Exploitation Tests")
        options_layout = QVBoxLayout(options_group)
        
        # SQL Injection
        self.sql_check = QCheckBox("SQL Injection")
        self.sql_check.setChecked(True)
        options_layout.addWidget(self.sql_check)
        
        # XSS
        self.xss_check = QCheckBox("Cross-Site Scripting (XSS)")
        self.xss_check.setChecked(True)
        options_layout.addWidget(self.xss_check)
        
        # LFI/RFI
        self.lfi_check = QCheckBox("Local/Remote File Inclusion")
        self.lfi_check.setChecked(True)
        options_layout.addWidget(self.lfi_check)
        
        # Command Injection
        self.cmd_check = QCheckBox("Command Injection")
        self.cmd_check.setChecked(True)
        options_layout.addWidget(self.cmd_check)
        
        # XXE
        self.xxe_check = QCheckBox("XML External Entity (XXE)")
        self.xxe_check.setChecked(True)
        options_layout.addWidget(self.xxe_check)
        
        # SSRF
        self.ssrf_check = QCheckBox("Server-Side Request Forgery (SSRF)")
        self.ssrf_check.setChecked(True)
        options_layout.addWidget(self.ssrf_check)
        
        layout.addWidget(options_group)
        
        # Advanced Exploitation Options
        advanced_group = QGroupBox("Advanced Exploitation Options")
        advanced_layout = QVBoxLayout(advanced_group)
        
        # Test depth
        depth_layout = QHBoxLayout()
        depth_layout.addWidget(QLabel("Test Depth:"))
        self.depth_combo = QComboBox()
        self.depth_combo.addItems(["Quick", "Standard", "Deep", "Comprehensive"])
        self.depth_combo.setCurrentText("Standard")
        depth_layout.addWidget(self.depth_combo)
        depth_layout.addStretch()
        advanced_layout.addLayout(depth_layout)
        
        # Advanced options checkboxes
        self.stealth_check = QCheckBox("Stealth Mode")
        advanced_layout.addWidget(self.stealth_check)
        
        self.payload_gen_check = QCheckBox("Advanced Payload Generation")
        self.payload_gen_check.setChecked(True)
        advanced_layout.addWidget(self.payload_gen_check)
        
        self.evasion_check = QCheckBox("Evasion Techniques")
        advanced_layout.addWidget(self.evasion_check)
        
        self.polymorphic_check = QCheckBox("Polymorphic Payloads")
        advanced_layout.addWidget(self.polymorphic_check)
        
        self.obfuscation_check = QCheckBox("Code Obfuscation")
        advanced_layout.addWidget(self.obfuscation_check)
        
        self.timing_check = QCheckBox("Timing Attacks")
        advanced_layout.addWidget(self.timing_check)
        
        self.chain_check = QCheckBox("Exploit Chaining")
        advanced_layout.addWidget(self.chain_check)
        
        self.custom_payload_check = QCheckBox("Custom Payloads")
        advanced_layout.addWidget(self.custom_payload_check)
        
        layout.addWidget(advanced_group)
        
        # Control buttons
        button_layout = QHBoxLayout()
        
        self.start_test_btn = QPushButton("Start Basic Test")
        self.start_test_btn.clicked.connect(self.start_test)
        button_layout.addWidget(self.start_test_btn)
        
        self.start_advanced_btn = QPushButton("Start Advanced Test")
        self.start_advanced_btn.clicked.connect(self.start_advanced_test)
        button_layout.addWidget(self.start_advanced_btn)
        
        self.stop_test_btn = QPushButton("Stop Test")
        self.stop_test_btn.setEnabled(False)
        self.stop_test_btn.clicked.connect(self.stop_test)
        button_layout.addWidget(self.stop_test_btn)
        
        layout.addLayout(button_layout)
        
        # Results section
        results_group = QGroupBox("Exploitation Test Results")
        results_layout = QVBoxLayout(results_group)
        
        # Results table
        self.results_table = QTableWidget()
        self.results_table.setColumnCount(4)
        self.results_table.setHorizontalHeaderLabels(["Test", "Status", "Payload", "Evidence"])
        self.results_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        results_layout.addWidget(self.results_table)
        
        # Results text
        self.results_text = QTextEdit()
        self.results_text.setMaximumHeight(200)
        self.results_text.setPlaceholderText("Exploitation test results will appear here...")
        results_layout.addWidget(self.results_text)
        
        layout.addWidget(results_group)
        
    def start_test(self):
        """Start exploitation testing"""
        target = self.target_input.text().strip()
        if not target:
            self.results_text.append("Please enter a target URL")
            return
            
        self.start_test_btn.setEnabled(False)
        self.stop_test_btn.setEnabled(True)
        
        # Clear previous results
        self.results_table.setRowCount(0)
        self.results_text.clear()
        
        # Start test in background thread
        self.test_thread = ExploitationTestThread(target, self.get_test_options())
        self.test_thread.result.connect(self.test_finished)
        self.test_thread.start()
        
    def start_advanced_test(self):
        """Start advanced exploitation testing"""
        target = self.target_input.text().strip()
        if not target:
            self.results_text.append("Please enter a target URL")
            return
            
        self.start_test_btn.setEnabled(False)
        self.start_advanced_btn.setEnabled(False)
        self.stop_test_btn.setEnabled(True)
        
        # Clear previous results
        self.results_table.setRowCount(0)
        self.results_text.clear()
        
        # Start advanced test in background thread
        self.test_thread = AdvancedExploitationTestThread(target, self.get_advanced_test_options())
        self.test_thread.result.connect(self.advanced_test_finished)
        self.test_thread.start()
        
    def get_test_options(self):
        """Get selected test options"""
        return {
            'sql_injection': self.sql_check.isChecked(),
            'xss': self.xss_check.isChecked(),
            'lfi_rfi': self.lfi_check.isChecked(),
            'command_injection': self.cmd_check.isChecked(),
            'xxe': self.xxe_check.isChecked(),
            'ssrf': self.ssrf_check.isChecked()
        }
        
    def get_advanced_test_options(self):
        """Get advanced test options"""
        return {
            'test_depth': self.depth_combo.currentText().lower(),
            'stealth_mode': self.stealth_check.isChecked(),
            'payload_generation': self.payload_gen_check.isChecked(),
            'evasion_techniques': self.evasion_check.isChecked(),
            'polymorphic_payloads': self.polymorphic_check.isChecked(),
            'obfuscation': self.obfuscation_check.isChecked(),
            'timing_attacks': self.timing_check.isChecked(),
            'exploit_chaining': self.chain_check.isChecked(),
            'custom_payloads': self.custom_payload_check.isChecked(),
            'sql_injection': self.sql_check.isChecked(),
            'xss': self.xss_check.isChecked(),
            'lfi_rfi': self.lfi_check.isChecked(),
            'command_injection': self.cmd_check.isChecked(),
            'xxe': self.xxe_check.isChecked(),
            'ssrf': self.ssrf_check.isChecked()
        }
        
    def test_finished(self, results):
        """Handle test completion"""
        self.start_test_btn.setEnabled(True)
        self.start_advanced_btn.setEnabled(True)
        self.stop_test_btn.setEnabled(False)
        
        # Display results
        if isinstance(results, dict):
            for test_name, result in results.items():
                row = self.results_table.rowCount()
                self.results_table.insertRow(row)
                
                # Handle different result formats
                if isinstance(result, dict):
                    status = "VULNERABLE" if result.get('vulnerable') else "SECURE"
                    payload = result.get('payload', '')
                    evidence = result.get('evidence', '')
                else:
                    status = "COMPLETED"
                    payload = ""
                    evidence = str(result)
                
                self.results_table.setItem(row, 0, QTableWidgetItem(test_name))
                self.results_table.setItem(row, 1, QTableWidgetItem(status))
                self.results_table.setItem(row, 2, QTableWidgetItem(payload))
                self.results_table.setItem(row, 3, QTableWidgetItem(evidence))
                
                # Add to results text
                self.results_text.append(f"{test_name}: {status}")
                if evidence:
                    self.results_text.append(f"  Evidence: {evidence}")
        else:
            # Handle non-dict results
            self.results_text.append(f"Exploitation Test Results: {results}")
            
    def advanced_test_finished(self, results):
        """Handle advanced test completion"""
        self.start_test_btn.setEnabled(True)
        self.start_advanced_btn.setEnabled(True)
        self.stop_test_btn.setEnabled(False)
        
        # Display advanced results
        if isinstance(results, dict):
            # Display summary
            if 'summary' in results:
                summary = results['summary']
                self.results_text.append(f"Advanced Exploitation Test Summary:")
                self.results_text.append(f"Total Tests: {summary.get('total_tests', 0)}")
                self.results_text.append(f"Successful Exploits: {summary.get('successful_exploits', 0)}")
                self.results_text.append(f"Failed Tests: {summary.get('failed_tests', 0)}")
                self.results_text.append(f"Risk Score: {summary.get('risk_score', 0)}/10")
                self.results_text.append("")
            
            # Display vulnerabilities
            if 'vulnerabilities' in results:
                for vuln in results['vulnerabilities']:
                    row = self.results_table.rowCount()
                    self.results_table.insertRow(row)
                    
                    self.results_table.setItem(row, 0, QTableWidgetItem(vuln.get('type', 'Unknown')))
                    self.results_table.setItem(row, 1, QTableWidgetItem("VULNERABLE"))
                    self.results_table.setItem(row, 2, QTableWidgetItem(vuln.get('payload', '')))
                    self.results_table.setItem(row, 3, QTableWidgetItem(vuln.get('evidence', '')))
                    
                    # Add to results text
                    self.results_text.append(f"Vulnerability: {vuln.get('type', 'Unknown')}")
                    self.results_text.append(f"  Severity: {vuln.get('severity', 'Unknown')}")
                    self.results_text.append(f"  Evidence: {vuln.get('evidence', '')}")
                    self.results_text.append("")
            
            # Display techniques used
            if 'techniques_used' in results:
                self.results_text.append("Advanced Techniques Used:")
                for technique in results['techniques_used']:
                    self.results_text.append(f"  - {technique}")
                self.results_text.append("")
                
        else:
            # Handle non-dict results
            self.results_text.append(f"Advanced Exploitation Test Results: {results}")
                
    def stop_test(self):
        """Stop current test"""
        if hasattr(self, 'test_thread') and self.test_thread.isRunning():
            self.test_thread.terminate()
            self.test_thread.wait()
            
        self.start_test_btn.setEnabled(True)
        self.start_advanced_btn.setEnabled(True)
        self.stop_test_btn.setEnabled(False)
        self.results_text.append("Test stopped by user")

class ExploitationTestThread(QThread):
    """Thread for running exploitation tests"""
    result = pyqtSignal(dict)
    
    def __init__(self, target, options):
        super().__init__()
        self.target = target
        self.options = options
        
    def run(self):
        """Run the exploitation tests"""
        try:
            try:
                from core.exploit_module import ExploitModule
            except ImportError:
                self.result.emit({'error': 'ExploitModule not available'})
                return
                
            exploit = ExploitModule()
            
            # Run comprehensive exploit test
            results = exploit.comprehensive_exploit_test(self.target)
            
            self.result.emit(results)
            
        except Exception as e:
            self.result.emit({'error': str(e)})

class AdvancedExploitationTestThread(QThread):
    """Thread for running advanced exploitation tests"""
    result = pyqtSignal(dict)
    
    def __init__(self, target, options):
        super().__init__()
        self.target = target
        self.options = options
        
    def run(self):
        """Run the advanced exploitation tests"""
        try:
            try:
                from core.exploit_module import ExploitModule
            except ImportError:
                self.result.emit({'error': 'ExploitModule not available'})
                return
                
            # Create exploit module with advanced options
            exploit = ExploitModule(
                advanced_mode=True,
                stealth_mode=self.options.get('stealth_mode', False)
            )
            
            # Run advanced exploitation test
            results = exploit.advanced_exploitation_test(self.target, self.options)
            
            self.result.emit(results)
            
        except Exception as e:
            self.result.emit({'error': str(e)})
